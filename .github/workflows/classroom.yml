name: Autograding Tests
'on':
  - push
  - repository_dispatch
permissions:
  checks: write
  actions: read
  contents: read

jobs:
  run-autograding-tests:
    runs-on: ubuntu-latest
    if: github.actor != 'github-classroom[bot]'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      # Add further tests as specified below, and extend "env" and "with" sections with the added tests.
      # "command" can be anything that runs tests, it doesn't matter if it is Gradle or any other tool. 
      # ⚠️ Note: For tools like npm, you may need to install dependencies first.
      # Example for JS:
      # - name: Install NPM deps
      #   run: npm install

      - name: Compile Main.java
        id: compile
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: HelloMEITREX - Compiles
          command: bash -lc "javac src/main/java/Main.java"
          timeout: 1
          max-score: 5

      - name: Prints Hello MEITREX
        id: print-hello
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: HelloMEITREX - Prints exact greeting
          command: bash -lc "javac src/main/java/Main.java && out=$(java -cp src/main/java Main); if [ \"$out\" = \"Hello MEITREX\" ]; then exit 0; else echo \"Expected 'Hello MEITREX' but got: '$out'\"; exit 1; fi"
          timeout: 1
          max-score: 5

      # Template for additional tests:
      # - name: <TestName> # will be shown in the students' feedback summary 
      #   id: <test-id>
      #   uses: classroom-resources/autograding-command-grader@v1
      #   with:
      #     test-name: <TestGroupName> - <TestName>
      #     command: '<command to run the test>'
      #     timeout: <how long to wait for the test to complete in minutes>
      #     max-score: <max score for this test>
      #
      # The test name must follow the format: `<TestGroupName> - <TestMethodName>`.
      # Tests with the same group name will be grouped together in the feedback shown to students.

      - name: Autograding Reporter
        uses: classroom-resources/autograding-grading-reporter@v1
        env:
          COMPILE_RESULTS: "${{ steps.compile.outputs.result }}"
          PRINT-HELLO_RESULTS: "${{ steps['print-hello'].outputs.result }}"
          # for each additional test, add a new environment variable
          # TEST-ID_RESULTS: "${{steps.test-id.outputs.result}}"
        with:
          # Add new test ids that must be executed. 
          # They must be split only by a comma, nothing else in between (not even spaces)
          runners: compile,print-hello